else {
print('Wrong Alternative. Alternative should be two.sided, less, or greater.')
return ()
}
cat('Statistical Hypothesis Test in conf.level = ',conf.level,'\n')
cat('--------------------------------------------------\n')
cat('alpha : ', alpha, '\n')
cat('test.statistics : ', test.statistics, '\n')
cat('p.value : ', round(p.value, 4), '\n')
if (p.value <= alpha) cat('H0(null hypothesis) is rejected.')
else cat('H0(null hypothesis) is not rejected.')
}
z.test(mu = 0.25,
mean = mean(sub.bodyfat[,'BodyFatPercent']),
n = length(sub.bodyfat[,'BodyFatPercent']),
sd = sd(sub.bodyfat[,'BodyFatPercent']),
alternative = 'greater',
conf.level = 0.95)
# 모집단의 분포를 모르지만, n=252로 z-검정을 사용한다.
z.test = function(mu, mean, n, sd, alternative="two.sided", conf.level){
test.statistics = round((mean - mu) / (sd / (n^0.5)), 2)
if (alternative == 'two.sided'){
alpha = (1 - conf.level)/2
p.value = pnorm(abs(test.statistics), lower.tail = FALSE)
}
else if (alternative == 'less'){
alpha = (1 - conf.level)
p.value = pnorm(abs(test.statistics), lower.tail = FALSE)
}
else if (alternative == 'greater'){
alpha = (1 - conf.level)
p.value = pnorm(abs(test.statistics), lower.tail = FALSE)
}
else {
print('Wrong Alternative. Alternative should be two.sided, less, or greater.')
return ()
}
cat('Statistical Hypothesis Test in conf.level = ',conf.level,'\n')
cat('--------------------------------------------------\n')
cat('alpha : ', alpha, '\n')
cat('test.statistics : ', test.statistics, '\n')
cat('p.value : ', round(p.value, 4), '\n')
cat('--------------------------------------------------\n')
if (p.value <= alpha) cat('H0(null hypothesis) is rejected.')
else cat('H0(null hypothesis) is not rejected.')
}
z.test(mu = 0.25,
mean = mean(sub.bodyfat[,'BodyFatPercent']),
n = length(sub.bodyfat[,'BodyFatPercent']),
sd = sd(sub.bodyfat[,'BodyFatPercent']),
alternative = 'greater',
conf.level = 0.95)
z.test(mu = 32,
mean = 31.4,
n = 35,
sd = 1.2,
alternative = 'two.sided',
conf.level = 0.975)
z.test(mu = 0.25,
mean = mean(sub.bodyfat[,'BodyFatPercent']),
n = length(sub.bodyfat[,'BodyFatPercent']),
sd = sd(sub.bodyfat[,'BodyFatPercent']),
alternative = 'greater',
conf.level = 0.95)
z.test(mu = 0.25,
mean = mean(sub.bodyfat[,'Weight']),
n = length(sub.bodyfat[,'Weight']),
sd = sd(sub.bodyfat[,'Weight']),
alternative = 'two.sided',
conf.level = 0.95)
z.test(mu = 180,
mean = mean(sub.bodyfat[,'Weight']),
n = length(sub.bodyfat[,'Weight']),
sd = sd(sub.bodyfat[,'Weight']),
alternative = 'two.sided',
conf.level = 0.95)
z.test(mu = 0.25,
mean = mean(sub.bodyfat.1[,'BodyFatPercent']),
n = length(sub.bodyfat.1[,'BodyFatPercent']),
sd = sd(sub.bodyfat.1[,'BodyFatPercent']),
alternative = 'greater',
conf.level = 0.95)
z.test(mu = 180,
mean = mean(sub.bodyfat.1[,'Weight']),
n = length(sub.bodyfat.1[,'Weight']),
sd = sd(sub.bodyfat.1[,'Weight']),
alternative = 'two.sided',
conf.level = 0.95)
# the least square estimators
LSE = function(X, y){
beta = solve(t(X)%*%X)%*%t(X)%*%y
return (beta)
}
LSE(x,y)
# body fat percentage & weight
x = sub.bodyfat.1$BodyFatPercent
y = sub.bodyfat.1$Weight
LSE(x,y)
# body fat percentage & height
x = sub.bodyfat.1$BodyFatPercent
y = sub.bodyfat.1$Height
LSE(x,y)
# the least square estimators
cal.LSE = function(X, y){
beta = solve(t(X)%*%X)%*%t(X)%*%y
return (beta)
}
# body fat percentage & weight
x = sub.bodyfat.1$BodyFatPercent
y = sub.bodyfat.1$Weight
cal.LSE(x,y)
# body fat percentage & height
x = sub.bodyfat.1$BodyFatPercent
y = sub.bodyfat.1$Height
cal.LSE(x,y)
# body fat percentage & abodomen
x = sub.bodyfat.1$BodyFatPercent
y = sub.bodyfat.1$AbdomenC
cal.LSE(x,y)
# body fat percentage & weight
x1 = sub.bodyfat.1$BodyFatPercent
y1 = sub.bodyfat.1$Weight
cal.LSE(x1,y1)
# body fat percentage & height
x2 = sub.bodyfat.1$BodyFatPercent
y2 = sub.bodyfat.1$Height
cal.LSE(x2,y2)
# body fat percentage & abodomen
x3 = sub.bodyfat.1$BodyFatPercent
y3 = sub.bodyfat.1$AbdomenC
cal.LSE(x3,y3)
# body fat percentage & weight
x1 = sub.bodyfat.1$BodyFatPercent
x1 = cbind(1,x1)
y1 = sub.bodyfat.1$Weight
cal.LSE(x1,y1)
# body fat percentage & height
x2 = sub.bodyfat.1$BodyFatPercent
x2 = cbind(1, x2)
y2 = sub.bodyfat.1$Height
cal.LSE(x2,y2)
# body fat percentage & abodomen
x3 = sub.bodyfat.1$BodyFatPercent
x3 = cbind(1, x3)
y3 = sub.bodyfat.1$AbdomenC
cal.LSE(x3,y3)
# body fat percentage & abodomen
x3 = sub.bodyfat.1$BodyFatPercent
x3 = cbind(1, x3)
y3 = sub.bodyfat.1$AbdomenC
cal.LSE(x3,y3)
ggplot(data=sub.bodyfat.1, aes(x=x, y=y1)) +
geom_point() +
stat_smooth(method='lm', formula = y1~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot')
ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=y1)) +
geom_point() +
stat_smooth(method='lm', formula = y1~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot')
ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Weight)) +
geom_point() +
stat_smooth(method='lm', formula = y1~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot')
ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Weight)) +
geom_point() +
stat_smooth(method='lm', formula = y1~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = weight')
p1 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Weight)) +
geom_point() +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = weight')
p2 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Height)) +
geom_point() +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = height')
p3 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=AbdomenC)) +
geom_point() +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = AbdomenC')
grid(p1,p2,p3,ncol=3, nrorw=1)
p1 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Weight)) +
geom_point() +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = weight')
p2 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Height)) +
geom_point() +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = height')
p3 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=AbdomenC)) +
geom_point() +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = AbdomenC')
grid.arrange(p1,p2,p3,ncol=3, nrorw=1)
ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Weight)) +
geom_point() +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = weight')
ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Height)) +
geom_point() +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = height')
ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=AbdomenC)) +
geom_point() +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = AbdomenC')
grid.arrange(p1,p2,p3,ncol=3, nrorw=1)
ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=AbdomenC)) +
geom_point() +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = AbdomenC')
grid.arrange(p1, p2, p3, ncol = 3)
grid.arrange(p1, p2, p3, ncol = 2, nrow = 2)
p3 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=AbdomenC)) +
geom_point(size=0.5) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = AbdomenC')
p3 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=AbdomenC)) +
geom_point(size=0.5) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = AbdomenC')
ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=AbdomenC)) +
geom_point(size=0.5) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = AbdomenC')
ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=AbdomenC)) +
geom_point(size=0.6) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = AbdomenC')
ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=AbdomenC, color=AbdomenC)) +
geom_point(size=0.6) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = AbdomenC')
p1 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Weight, color=Weight)) +
geom_point(size=0.6) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = weight')
p2 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Height, color=Height)) +
geom_point(size=0.6) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = height')
p3 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=AbdomenC, color=AbdomenC)) +
geom_point(size=0.6) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('Linear Regression Line and Scatter Plot : y = AbdomenC')
grid.arrange(p1, p2, p3, ncol = 2, nrow = 2)
p1 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Weight, color=Weight)) +
geom_point(size=0.6) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('y = weight')
p2 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Height, color=Height)) +
geom_point(size=0.6) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('y = height')
p3 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=AbdomenC, color=AbdomenC)) +
geom_point(size=0.6) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('y = AbdomenC')
grid.arrange(p1, p2, p3, ncol = 2, nrow = 2)
# body fat percentage & abodomen
y3 = sub.bodyfat.1$AbdomenC
LSE.3 = cal.LSE(x,y3)
cat(LSE.3)
cal.LSE(x,y3)
# body fat percentage & weight
x = sub.bodyfat.1$BodyFatPercent
x = cbind(1,x)
y1 = sub.bodyfat.1$Weight
cal.LSE(x,y1)
# body fat percentage & abodomen
y3 = sub.bodyfat.1$AbdomenC
cal.LSE(x,y3)
# body fat percentage & abodomen
y3 = sub.bodyfat.1$AbdomenC
LSE3 = cal.LSE(x,y3)
LSE3
cat(LSE3)
table(LSE3)
cat
cat(LSE3)
print(LSE3)
cat('y = ',LSE3[1], '+', LSE3[2], 'x + e')
# body fat percentage & abodomen
y3 = sub.bodyfat.1$AbdomenC
LSE3 = cal.LSE(x,y3)
print(LSE3)
print('The equation of the estimated regression line')
cat('y = ',LSE3[1], '+', LSE3[2], 'x + e')
# body fat percentage & abodomen
y3 = sub.bodyfat.1$AbdomenC
LSE3 = cal.LSE(x,y3)
print(LSE3)
print(' ')
print('The equation of the estimated regression line')
cat('y = ',LSE3[1], '+', LSE3[2], 'x + e')
# body fat percentage & abodomen
y3 = sub.bodyfat.1$AbdomenC
LSE3 = cal.LSE(x,y3)
print(LSE3)
print('\n')
print('The equation of the estimated regression line')
cat('y = ',LSE3[1], '+', LSE3[2], 'x + e')
# body fat percentage & abodomen
y3 = sub.bodyfat.1$AbdomenC
LSE3 = cal.LSE(x,y3)
print(LSE3)
cat('The equation of the estimated regression line')
cat('y = ',LSE3[1], '+', LSE3[2], 'x + e')
# body fat percentage & abodomen
y3 = sub.bodyfat.1$AbdomenC
LSE3 = cal.LSE(x,y3)
print(LSE3)
cat('\nThe equation of the estimated regression line\n')
cat('y = ',LSE3[1], '+', LSE3[2], 'x + e')
# body fat percentage & abodomen
y3 = sub.bodyfat.1$AbdomenC
LSE3 = cal.LSE(x,y3)
print(LSE3)
cat('\nThe equation of the estimated regression line\n')
cat('y = ',LSE3[1], '+', LSE3[2], 'x + e')
# body fat percentage & height
y2 = sub.bodyfat.1$Height
LSE2 = cal.LSE(x,y2)
print(LSE2)
cat('\nThe equation of the estimated regression line\n')
cat('y = ',LSE2[1], '+', LSE2[2], 'x + e')
# body fat percentage & weight
x = sub.bodyfat.1$BodyFatPercent
x = cbind(1,x)
y1 = sub.bodyfat.1$Weight
LSE1 = cal.LSE(x,y1)
print(LSE1)
cat('\nThe equation of the estimated regression line\n')
cat('y = ',LSE1[1], '+', LSE1[2], 'x + e')
# body fat percentage & weight
x = sub.bodyfat.1$BodyFatPercent
x = cbind(1,x)
y1 = sub.bodyfat.1$Weight
cat('Least square estiamtes of the parameter β0 and β1\n')
LSE1 = cal.LSE(x,y1)
print(LSE1)
cat('\nThe equation of the estimated regression line\n')
cat('y = ',LSE1[1], '+', LSE1[2], 'x + e')
# body fat percentage & height
y2 = sub.bodyfat.1$Height
LSE2 = cal.LSE(x,y2)
cat('Least square estiamtes of the parameter β0 and β1\n')
print(LSE2)
cat('\nThe equation of the estimated regression line\n')
cat('y = ',LSE2[1], '+', LSE2[2], 'x + e')
# body fat percentage & abodomen
y3 = sub.bodyfat.1$AbdomenC
cat('Least square estiamtes of the parameter β0 and β1\n')
LSE3 = cal.LSE(x,y3)
print(LSE3)
cat('\nThe equation of the estimated regression line\n')
cat('y = ',LSE3[1], '+', LSE3[2], 'x + e')
body.fat = read_table('body_fat.txt')
head(body.fat, 10)
setwd('/Users/jimin/Desktop/데스크탑 - 이지민의 MacBook Air/지민/ewha/2023-2/Regression/week3/')
body.fat = read_table('body_fat.txt')
head(body.fat, 10)
# recompute body fat percentage
compute.bodyfat = function(x){
y = (495/x) - 450
return (round(y, 1))
}
# find errors of dataset SiriBF- Perc
re.SiriBFperc = apply(body.fat[,'Density'], 2, compute.bodyfat) # recomputed body fat perc
# del.errors : 0 이하면 0으로, 100 초과하면, 100으로 만들어 주는 함수
del.errors = function(x){
if (x >= 0 & x<= 100) return (x)
else if(x < 0) return (0)
else return (100)
}
fixed.SiriBFperc = apply(re.SiriBFperc, 1, del.errors) # error fixed ver of re.SiriBFperc
# 오류를 제거한 버전과 원본 버전의 차이를 비교해 몇 개의 잘못된 데이터가 있었는지 확인
print(length(re.SiriBFperc))
print(sum(re.SiriBFperc == fixed.SiriBFperc))
# 기존 SiriBFperc 열에 오류가 있는지 확인한다.
SiriBFperc = body.fat[,'SiriBFperc']
SiriBFperc.col = apply(SiriBFperc, 1, del.errors)
# 오류를 제거한 버전과 원본 버전의 차이를 비교해 몇 개의 잘못된 데이터가 있었는지 확인
print(length(SiriBFperc.col))
print(sum(SiriBFperc == SiriBFperc.col))
# 오류가 있는 데이터가 없다.
sub.bodyfat = cbind(fixed.SiriBFperc, body.fat[,c('Weight', 'Height','AbdomenC')])
colnames(sub.bodyfat)[1] = 'BodyFatPercent' # col name 변경
head(sub.bodyfat, 5)
plot(sub.bodyfat)
# outliers 솎아내기 : 인덱스 파악
which(sub.bodyfat[,'Weight'] >= 250) # 39, 41
which(sub.bodyfat[,'Height'] < 50) # 42
which(sub.bodyfat[,'AbdomenC'] > 130) # 39
which(sub.bodyfat[,'BodyFatPercent'] >= 45) # 216
sub.bodyfat.1 = sub.bodyfat[-c(39,41,42,216),] # delete outliers
plot(sub.bodyfat.1)
# numercial summary + variable's variability(range, IQR, var, std)
summary(sub.bodyfat)
apply(sub.bodyfat, 2, sd) # standard deviation
apply(sub.bodyfat, 2, var) # variance
apply(sub.bodyfat, 2, range) # range : min, max value
apply(sub.bodyfat, 2, IQR) # IQR
install.packages('gridExtra', dependencies=TRUE, repos = "http://cran.us.r-project.org")
library(tidyverse)
library(gridExtra)
# graphical summary
g1 = ggplot(sub.bodyfat, aes(x=BodyFatPercent)) +  geom_boxplot() + ggtitle('BodyFatPercent boxplot')
g2 = ggplot(sub.bodyfat, aes(x=Weight)) + geom_freqpoly(bins=16) + ggtitle('Weight poly')
g3 = ggplot(sub.bodyfat, aes(x=Height)) +  geom_boxplot() + ggtitle('Height boxplot')
g4 = ggplot(sub.bodyfat, aes(x=AbdomenC)) + geom_freqpoly(bins=16) + ggtitle('abdomen circumference poly')
grid.arrange(g1,g2,g3,g4, ncol=2,nrow=2) # 4개의 그래프를 한 번에 출력
# 모집단의 분포를 모르지만, n=252로 z-검정을 사용한다.
z.test = function(mu, mean, n, sd, alternative="two.sided", conf.level){
test.statistics = round((mean - mu) / (sd / (n^0.5)), 2)
if (alternative == 'two.sided'){
alpha = (1 - conf.level)/2
p.value = pnorm(abs(test.statistics), lower.tail = FALSE)
}
else if (alternative == 'less'){
alpha = (1 - conf.level)
p.value = pnorm(abs(test.statistics), lower.tail = FALSE)
}
else if (alternative == 'greater'){
alpha = (1 - conf.level)
p.value = pnorm(abs(test.statistics), lower.tail = FALSE)
}
else {
print('Wrong Alternative. Alternative should be two.sided, less, or greater.')
return ()
}
cat('Statistical Hypothesis Test in conf.level = ',conf.level,'\n')
cat('--------------------------------------------------\n')
cat('alpha : ', alpha, '\n')
cat('test.statistics : ', test.statistics, '\n')
cat('p.value : ', round(p.value, 4), '\n')
cat('--------------------------------------------------\n')
if (p.value <= alpha) cat('H0(null hypothesis) is rejected.')
else cat('H0(null hypothesis) is not rejected.')
}
z.test(mu = 0.25,
mean = mean(sub.bodyfat.1[,'BodyFatPercent']),
n = length(sub.bodyfat.1[,'BodyFatPercent']),
sd = sd(sub.bodyfat.1[,'BodyFatPercent']),
alternative = 'greater',
conf.level = 0.95)
z.test(mu = 180,
mean = mean(sub.bodyfat.1[,'Weight']),
n = length(sub.bodyfat.1[,'Weight']),
sd = sd(sub.bodyfat.1[,'Weight']),
alternative = 'two.sided',
conf.level = 0.95)
# the least square estimators
cal.LSE = function(X, y){
beta = solve(t(X)%*%X)%*%t(X)%*%y
return (beta)
}
# body fat percentage & weight
x = sub.bodyfat.1$BodyFatPercent
x = cbind(1,x)
y1 = sub.bodyfat.1$Weight
cat('Least square estiamtes of the parameter β0 and β1\n')
LSE1 = cal.LSE(x,y1)
print(LSE1)
cat('\nThe equation of the estimated regression line\n')
cat('y = ',LSE1[1], '+', LSE1[2], 'x + e')
# body fat percentage & height
y2 = sub.bodyfat.1$Height
LSE2 = cal.LSE(x,y2)
cat('Least square estiamtes of the parameter β0 and β1\n')
print(LSE2)
cat('\nThe equation of the estimated regression line\n')
cat('y = ',LSE2[1], '+', LSE2[2], 'x + e')
# body fat percentage & abodomen
y3 = sub.bodyfat.1$AbdomenC
cat('Least square estiamtes of the parameter β0 and β1\n')
LSE3 = cal.LSE(x,y3)
print(LSE3)
cat('\nThe equation of the estimated regression line\n')
cat('y = ',LSE3[1], '+', LSE3[2], 'x + e')
p1 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Weight, color=Weight)) +
geom_point(size=0.6) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('y = weight')
p2 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Height, color=Height)) +
geom_point(size=0.6) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('y = height')
p3 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=AbdomenC, color=AbdomenC)) +
geom_point(size=0.6) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('y = AbdomenC')
grid.arrange(p1, p2, p3, ncol = 2, nrow = 2)
p1 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Weight, color=Weight)) +
geom_point(size=0.6) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('y = weight')
install.packages('gridExtra', dependencies=TRUE, repos = "http://cran.us.r-project.org")
library(tidyverse)
library(gridExtra)
p1 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Weight, color=Weight)) +
geom_point(size=0.6) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('y = weight')
p2 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=Height, color=Height)) +
geom_point(size=0.6) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('y = height')
p3 = ggplot(data=sub.bodyfat.1, aes(x=BodyFatPercent, y=AbdomenC, color=AbdomenC)) +
geom_point(size=0.6) +
stat_smooth(method='lm', formula = y~x, geom = 'smooth') +
ggtitle('y = AbdomenC')
grid.arrange(p1, p2, p3, ncol = 2, nrow = 2)
